rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get) User 'CS9YmAD2rRatSoGMcqiYFwIJxdB3' can create, update, get or delete their own profile.
     * @deny (create, update, delete, get) User 'anotherUser' cannot create, update, get or delete User 'CS9YmAD2rRatSoGMcqiYFwIJxdB3' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for documents within a user's document collection. Only the owner can read and write.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create, update, delete, get) User 'CS9YmAD2rRatSoGMcqiYFwIJxdB3' can create, update, delete, get a document within their own document collection.
     * @deny (create, update, delete, get) User 'anotherUser' cannot create, update, delete, get User 'CS9YmAD2rRatSoGMcqiYFwIJxdB3' documents.
     * @principle Enforces hierarchical document ownership for all document operations.
     */
    match /users/{userId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to queues while restricting create, update, and delete operations.
     * @path /queues/{queueId}
     * @allow get, list Anyone can read queue information.
     * @deny create, update, delete Only authorized services/admins can modify queue data.
     * @principle Public read access with restricted write access for queues.
     */
    match /queues/{queueId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for queue entries within a queue. Only the owner can create, read, update, and delete their own entries.
     * @path /queues/{queueId}/queueEntries/{queueEntryId}
     * @allow (create, update, delete, get) User 'CS9YmAD2rRatSoGMcqiYFwIJxdB3' can manage their own queue entries in the queue.
     * @deny (create, update, delete, get) User 'anotherUser' cannot manage User 'CS9YmAD2rRatSoGMcqiYFwIJxdB3' queue entries.
     * @principle Enforces user-ownership for queue entries using the userId field in the document.
     */
    match /queues/{queueId}/queueEntries/{queueEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
}