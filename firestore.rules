/**
 * @file Firestore Security Rules for FlowIDQ - Prototyping Mode
 *
 * @Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and documents.
 * Queues and locations are publicly readable, but writes are generally restricted in this prototype.
 *
 * @Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - User documents are stored in `/users/{userId}/documents/{documentId}`.
 * - QR codes are stored in `/qrcodes/{qrCodeId}`.
 * - Locations are stored in `/locations/{locationId}`.
 * - Queues are stored in `/locations/{locationId}/queues/{queueId}`.
 * - Queue tokens are stored in `/queues/{queueId}/tokens/{tokenId}`.
 * - Access history is stored in `/access_history/{accessHistoryId}`.
 *
 * @Key Security Decisions:
 * - User listing is disallowed.
 * - The /access_history collection is globally writeable to allow logging, but modification is restricted.
 * - QR code access requires custom logic (OTP/password) and is not fully implemented in this prototype.
 * - Read operations are generally open for locations and queues to allow unauthenticated access.
 *
 * @Denormalization for Authorization:
 * - Documents include a `userId` field to enable simple ownership checks.
 *
 * @Structural Segregation:
 * - User data and public data (locations, queues) are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == '{userId}'
     * @allow (get) request.auth.uid == '{userId}'
     * @deny (create) request.auth.uid != '{userId}'
     * @deny (update) request.auth.uid != '{userId}'
     * @deny (delete) request.auth.uid != '{userId}'
     * @principle Enforces document ownership for writes.  Allows self-creation.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) request.auth.uid == '{userId}'
     * @allow (get) request.auth.uid == '{userId}'
     * @deny (create) request.auth.uid != '{userId}'
     * @deny (update) request.auth.uid != '{userId}'
     * @deny (delete) request.auth.uid != '{userId}'
     * @principle Enforces document ownership for writes.  Allows self-creation.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows access to QR codes. Custom validation required for OTP/password.
     * @path /qrcodes/{qrCodeId}
     * @allow (get) true
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Requires custom validation based on OTP/password.
     */
    match /qrcodes/{qrCodeId} {
      allow get: if true;
      allow list: if false;
      allow create: if false; // TODO: Implement custom logic for QR code creation.
      allow update: if false; // TODO: Implement custom logic for QR code updates.
      allow delete: if false; // TODO: Implement custom logic for QR code deletion.
    }

    /**
     * @description Allows public read access to locations.  Write access is restricted in this prototype.
     * @path /locations/{locationId}
     * @allow (get) true
     * @allow (list) true
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Allows public read, restricts writes in this prototype.
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to queues.  Write access is restricted in this prototype.
     * @path /locations/{locationId}/queues/{queueId}
     * @allow (get) true
     * @allow (list) true
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Allows public read, restricts writes in this prototype.
     */
    match /locations/{locationId}/queues/{queueId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read/write to queue tokens.
     * @path /queues/{queueId}/tokens/{tokenId}
     * @allow (get) true
     * @allow (list) true
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     */
    match /queues/{queueId}/tokens/{tokenId} {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to create access history entries, but restricts modifications.
     * @path /access_history/{accessHistoryId}
     * @allow (create) true
     * @deny (update) false
     * @deny (delete) false
     * @principle Allows public logging of access history, restricts modifications.
     */
    match /access_history/{accessHistoryId} {
      allow get: if true;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}