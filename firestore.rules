/**
 * @file Firestore Security Rules for SecurePass Application
 *
 * @core_philosophy: This ruleset enforces a strict user-ownership model for personal data,
 * ensuring that only authenticated users can access their own information. Public data
 * (queues) are readable by anyone.
 *
 * @data_structure:
 * - /users/{userId}: Stores user profiles.  All data is nested under this path.
 * - /users/{userId}/documents/{documentId}: Stores documents owned by the user.
 * - /users/{userId}/documents/{documentId}/qrCodes/{qrCodeId}: Stores QR codes for documents.
 * - /users/{userId}/documents/{documentId}/accessLogs/{accessLogId}: Stores access logs.
 * - /queues/{queueId}: Stores queue information (publicly readable).
 * - /queues/{queueId}/queueEntries/{queueEntryId}: Stores queue entries.
 *
 * @key_security_decisions:
 * - User listing is disallowed.
 * - All documents are owned by a specific user.
 * - Queues are publicly readable, while queue entries are only writable to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their profile.
     * @allow (get, list, update, delete) User with matching userId can get, update, or delete their profile.
     * @deny (create) User cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to documents owned by a specific user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with matching userId can create a document.
     * @allow (get, list, update, delete) User with matching userId can get, update, or delete their document.
     * @deny (create) User cannot create a document with a mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to QR codes associated with a specific document.
     * @path /users/{userId}/documents/{documentId}/qrCodes/{qrCodeId}
     * @allow (create) User with matching userId can create a QR code.
     * @allow (get, list, update, delete) User with matching userId can get, update, or delete their QR code.
     * @deny (create) User cannot create a QR code with a mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId}/qrCodes/{qrCodeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to access logs for a specific document.
     * @path /users/{userId}/documents/{documentId}/accessLogs/{accessLogId}
     * @allow (create) User with matching userId can create an access log.
     * @allow (get, list, update, delete) User with matching userId can get, update, or delete their access log.
     * @deny (create) User cannot create an access log with a mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId}/accessLogs/{accessLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to queue information.
     * @path /queues/{queueId}
     * @allow (get, list) Any user can get or list queue information.
     * @allow (create, update, delete) Only authenticated users can create, update or delete queue information.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /queues/{queueId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to queue entries for a specific queue.
     * @path /queues/{queueId}/queueEntries/{queueEntryId}
     * @allow (create) Authenticated user can create a queue entry.
     * @allow (get, list, update, delete) Authenticated user can get, update, or delete queue entries.
     * @principle Allows authenticated users to manage queue entries.
     */
    match /queues/{queueId}/queueEntries/{queueEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}