/**
 * @file Firebase Security Rules for SecurePass Application
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and documents.
 *   Queues are publicly readable, but queue entries are user-owned.
 * @dataStructure
 *   - /users/{userId}: User profiles, accessible only by the user.
 *   - /users/{userId}/documents/{documentId}: Documents owned by a specific user, accessible only by the user.
 *   - /queues/{queueId}: Queue information, publicly readable.
 *   - /queues/{queueId}/queueEntries/{queueEntryId}: Queue entries, owned by a specific user.
 * @keySecurityDecisions
 *   - Users can only access their own data.
 *   - Queues are publicly readable to allow easy access to queue information.
 *   - User listing is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user123' cannot create a profile with a mismatched ID.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete user 'user123's profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to documents stored under a specific user. Only the owner of the user profile can manage these documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) - User with ID 'user123' can create a document under their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete a document under their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user123' cannot create a document under another user's profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete a document under user 'user123's profile.
     *   - request.auth.uid: 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to queue information. Queues are publicly readable, but restricted creation and modification.
     * @path /queues/{queueId}
     * @allow (get, list) - Any user can read queue information.
     * @deny (create, update, delete) - No user can create, update or delete a queue.
     * @principle Allows public read access while restricting write access to specific roles.
     */
    match /queues/{queueId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to queue entries. Ensures only the user can manage their queue entries.
     * @path /queues/{queueId}/queueEntries/{queueEntryId}
     * @allow (create) - User with ID 'user123' can create a queue entry under a queue.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete a queue entry they own.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) - User with ID 'user123' cannot create a queue entry for another user.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete a queue entry owned by user 'user123'.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Enforces document ownership for writes and restricts access to user-owned data.
     */
    match /queues/{queueId}/queueEntries/{queueEntryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(resource.data.userId);
      allow list: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}