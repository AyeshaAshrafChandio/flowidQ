/**
 * @fileoverview Firestore Security Rules for FlowIDQ.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, documents, and data sharing logs, while also providing secure organization-based access to queue tokens.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/documents/{documentId}: Stores documents uploaded by the user.
 * - /organizations/{organizationId}: Stores organization profiles.
 * - /organizations/{organizationId}/queueTokens/{queueTokenId}: Stores queue tokens generated by an organization.
 * - /users/{userId}/dataSharingLogs/{logId}: Stores data sharing logs for a user.
 *
 * Key Security Decisions:
 * - User data and related subcollections (documents, data sharing logs) are strictly accessible only to the owning user.
 * - Organizations can manage their queue tokens.
 * - No user listing is allowed at the top-level `/users` or `/organizations` collections.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded in the path for user-owned resources (documents, data sharing logs) to avoid `get()` calls for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces user-ownership: only the authenticated user can access their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to documents uploaded by a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with ID 'user123' can create a document in their collection.
     * @allow (get) User with ID 'user123' can read a document in their collection.
     * @allow (update) User with ID 'user123' can update a document in their collection.
     * @allow (delete) User with ID 'user123' can delete a document in their collection.
     * @deny (create) User with ID 'user456' cannot create a document for 'user123'.
     * @principle Enforces user-ownership: only the authenticated user can access their own documents.
     */
    match /users/{userId}/documents/{documentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to organization profiles.
     * @path /organizations/{organizationId}
     * @allow (get) Any signed-in user can read organization profiles.
     * @allow (create) Any signed-in user can create an organization profile.
     * @allow (update) Any signed-in user can update an organization profile.
     * @allow (delete) Any signed-in user can delete an organization profile.
     * @deny (list) No one can list all organizations.
     * @principle Requires user to be signed in for all write operations.
     */
    match /organizations/{organizationId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to queue tokens generated by an organization.
     * @path /organizations/{organizationId}/queueTokens/{queueTokenId}
     * @allow (get) Any signed-in user can read queue tokens.
     * @allow (create) Any signed-in user can create a queue token for the organization.
     * @allow (update) Any signed-in user can update a queue token for the organization.
     * @allow (delete) Any signed-in user can delete a queue token for the organization.
     * @principle Organizations manage their own queue tokens.
     */
    match /organizations/{organizationId}/queueTokens/{queueTokenId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to data sharing logs for a user.
     * @path /users/{userId}/dataSharingLogs/{logId}
     * @allow (create) User with ID 'user123' can create a data sharing log in their collection.
     * @allow (get) User with ID 'user123' can read a data sharing log in their collection.
     * @allow (update) User with ID 'user123' can update a data sharing log in their collection.
     * @allow (delete) User with ID 'user123' can delete a data sharing log in their collection.
     * @deny (create) User with ID 'user456' cannot create a data sharing log for 'user123'.
     * @principle Enforces user-ownership: only the authenticated user can access their own data sharing logs.
     */
    match /users/{userId}/dataSharingLogs/{logId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}