/**
 * @file Firestore Security Rules for SecurePass application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and documents.
 * Access to queue and location data is generally public, but write access is restricted.
 * Authorization relies primarily on the authenticated user's UID and path-based checks.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` is the Firebase Authentication UID.
 * - Documents are stored under `/users/{userId}/documents/{documentId}`, ensuring user-specific access.
 * - QR codes are stored under `/qrcodes/{qrCodeId}`.
 * - Locations are stored under `/locations/{locationId}`.
 * - Queues are stored under `/locations/{locationId}/queues/{queueId}`.
 * - Queue tokens are stored under `/queues/{queueId}/tokens/{tokenId}`.
 * - Access history logs are stored under `/access_history/{accessHistoryId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and documents.
 * - Listing user profiles is disallowed for privacy.
 * - Public read access is granted to locations, queues, and access history.
 * - QR code access requires custom logic (not fully implemented in this prototype).
 * - Write access to access history is denied except for creation by backend.
 *
 * Denormalization for Authorization:
 * - Documents include a `userId` field to enforce ownership, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile.
     * @allow (get) User with UID 'user_abc' can read their profile.
     * @allow (update) User with UID 'user_abc' can update their profile.
     * @allow (delete) User with UID 'user_abc' can delete their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read profile with ID 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of users.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with UID 'user_abc' can create a document in their own folder.
     * @allow (get) User with UID 'user_abc' can read a document in their own folder.
     * @allow (update) User with UID 'user_abc' can update a document in their own folder.
     * @allow (delete) User with UID 'user_abc' can delete a document in their own folder.
     * @deny (create) User with UID 'user_xyz' cannot create a document in 'user_abc' folder.
     * @deny (get) User with UID 'user_xyz' cannot read document in 'user_abc' folder.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read access to QR code information, but requires custom logic for access validation.
     * @path /qrcodes/{qrCodeId}
     * @allow (get) Any user can attempt to read QR code information. Further validation (OTP, password) would be needed.
     * @deny (create) No user can create qrcode.
     * @deny (update) No user can update qrcode.
     *
     * @principle Requires custom validation logic (OTP, password) to control access.
     */
    match /qrcodes/{qrCodeId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      // TODO: Add OTP/password validation logic.
    }

    /**
     * @description Allows public read access to location data.
     * @path /locations/{locationId}
     * @allow (get) Any user can read location data.
     * @deny (create) No user can create location.
     * @deny (update) No user can update location.
     * @principle Allows public read access for location data.
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to queue data within a location.
     * @path /locations/{locationId}/queues/{queueId}
     * @allow (get) Any user can read queue data.
     * @deny (create) No user can create queue.
     * @deny (update) No user can update queue.
     * @principle Allows public read access for queue data.
     */
    match /locations/{locationId}/queues/{queueId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read and write queue tokens.
     * @path /queues/{queueId}/tokens/{tokenId}
     * @allow (get) Any user can read queue tokens.
     * @deny (create) No user can create queue token.
     * @deny (update) No user can update queue token.
     */
    match /queues/{queueId}/tokens/{tokenId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to access history, but restricts modification.
     * @path /access_history/{accessHistoryId}
     * @allow (get) Any user can read access history.
     * @deny (create) No user can create access history.
     * @deny (update) No user can update access history.
     */
    match /access_history/{accessHistoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}