{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the SecurePass application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "createdAt"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a digital document stored in the user's wallet.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the document."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Document)"
        },
        "name": {
          "type": "string",
          "description": "Name of the document."
        },
        "fileUrl": {
          "type": "string",
          "description": "URL of the stored document file.",
          "format": "uri"
        },
        "uploadDate": {
          "type": "string",
          "description": "Timestamp indicating when the document was uploaded.",
          "format": "date-time"
        },
        "encryptionKey": {
          "type": "string",
          "description": "Encryption key used to secure the document."
        },
        "qrCodeId": {
          "type": "string",
          "description": "Reference to QrCode. (Relationship: QrCode 1:1 Document)"
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "fileUrl",
        "uploadDate",
        "encryptionKey"
      ]
    },
    "QrCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QrCode",
      "type": "object",
      "description": "Represents a QR code generated for sharing a document.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the QR code."
        },
        "documentId": {
          "type": "string",
          "description": "Reference to Document. (Relationship: Document 1:1 QrCode)"
        },
        "generatedDate": {
          "type": "string",
          "description": "Timestamp indicating when the QR code was generated.",
          "format": "date-time"
        },
        "expiryDate": {
          "type": "string",
          "description": "Timestamp indicating when the QR code expires.",
          "format": "date-time"
        },
        "accessPassword": {
          "type": "string",
          "description": "Password required to access the document via the QR code."
        },
        "otp": {
          "type": "string",
          "description": "One-time password required to access the document via the QR code."
        }
      },
      "required": [
        "id",
        "documentId",
        "generatedDate",
        "expiryDate"
      ]
    },
    "Queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Queue",
      "type": "object",
      "description": "Represents a queue in the smart queue system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the queue."
        },
        "locationId": {
          "type": "string",
          "description": "Reference to Location. (Relationship: Location 1:N Queue)"
        },
        "name": {
          "type": "string",
          "description": "Name of the queue (e.g., 'Registration', 'Consultation')."
        },
        "description": {
          "type": "string",
          "description": "Description of the queue."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the queue was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "locationId",
        "name",
        "createdAt"
      ]
    },
    "QueueToken": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueueToken",
      "type": "object",
      "description": "Represents a token assigned to a user in a queue.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the queue token."
        },
        "queueId": {
          "type": "string",
          "description": "Reference to Queue. (Relationship: Queue 1:N QueueToken)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N QueueToken)"
        },
        "tokenNumber": {
          "type": "number",
          "description": "The token number assigned to the user."
        },
        "assignedTime": {
          "type": "string",
          "description": "Timestamp indicating when the token was assigned.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Current status of the token (e.g., 'Waiting', 'Serving', 'Completed')."
        }
      },
      "required": [
        "id",
        "queueId",
        "userId",
        "tokenNumber",
        "assignedTime",
        "status"
      ]
    },
    "Location": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Location",
      "type": "object",
      "description": "Represents a physical location (e.g., hospital, bank, public office).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the location."
        },
        "name": {
          "type": "string",
          "description": "Name of the location."
        },
        "address": {
          "type": "string",
          "description": "Address of the location."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude coordinate of the location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude coordinate of the location."
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "latitude",
        "longitude"
      ]
    },
    "AccessHistory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccessHistory",
      "type": "object",
      "description": "Represents the access history of documents.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the access history entry."
        },
        "documentId": {
          "type": "string",
          "description": "Reference to Document. (Relationship: Document 1:N AccessHistory)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the document was accessed.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N AccessHistory)"
        },
        "ipAddress": {
          "type": "string",
          "description": "IP address from which the document was accessed."
        },
        "accessMethod": {
          "type": "string",
          "description": "Method used to access the document (e.g., 'QR Code', 'Direct Link')."
        }
      },
      "required": [
        "id",
        "documentId",
        "timestamp",
        "userId",
        "ipAddress",
        "accessMethod"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information.  The 'userId' parameter is the Firebase Authentication UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Authentication UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores documents for a specific user. The 'userId' parameter corresponds to the user's UID, ensuring only the user can access their documents.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Authentication UID of the user."
            },
            {
              "name": "documentId",
              "description": "Unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/qrcodes/{qrCodeId}",
        "definition": {
          "entityName": "QrCode",
          "schema": {
            "$ref": "#/backend/entities/QrCode"
          },
          "description": "Stores QR code information. This collection requires custom security rules to validate access based on OTP/password.",
          "params": [
            {
              "name": "qrCodeId",
              "description": "Unique identifier for the QR code."
            }
          ]
        }
      },
      {
        "path": "/locations/{locationId}",
        "definition": {
          "entityName": "Location",
          "schema": {
            "$ref": "#/backend/entities/Location"
          },
          "description": "Stores location information.",
          "params": [
            {
              "name": "locationId",
              "description": "Unique identifier for the location."
            }
          ]
        }
      },
      {
        "path": "/locations/{locationId}/queues/{queueId}",
        "definition": {
          "entityName": "Queue",
          "schema": {
            "$ref": "#/backend/entities/Queue"
          },
          "description": "Stores queue information for a specific location.",
          "params": [
            {
              "name": "locationId",
              "description": "Unique identifier for the location."
            },
            {
              "name": "queueId",
              "description": "Unique identifier for the queue."
            }
          ]
        }
      },
      {
        "path": "/queues/{queueId}/tokens/{tokenId}",
        "definition": {
          "entityName": "QueueToken",
          "schema": {
            "$ref": "#/backend/entities/QueueToken"
          },
          "description": "Stores queue tokens for a specific queue.",
          "params": [
            {
              "name": "queueId",
              "description": "Unique identifier for the queue."
            },
            {
              "name": "tokenId",
              "description": "Unique identifier for the queue token."
            }
          ]
        }
      },
      {
        "path": "/access_history/{accessHistoryId}",
        "definition": {
          "entityName": "AccessHistory",
          "schema": {
            "$ref": "#/backend/entities/AccessHistory"
          },
          "description": "Stores access history for documents. This collection is globally accessible for logging, with security rules restricting modification.",
          "params": [
            {
              "name": "accessHistoryId",
              "description": "Unique identifier for the access history entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs.  \n\n**Authorization Independence:**  Authorization independence is achieved through denormalization. For instance, access to documents is governed by the user's ID, stored directly within the document. Similarly, queues are linked to locations, and authorization can be checked against the user's role within the location if needed (though roles are not explicitly modeled in this design).  \n\n**Structural Segregation:**  Data with differing access requirements is segregated into distinct collections. User profiles are stored separately from documents. Documents are user-owned, stored under `/users/{userId}/documents/{documentId}`, ensuring only the user can access them.  \n\n**Access Modeling:**\n*   **Path-Based Ownership:** Documents are stored under the user's ID (`/users/{userId}/documents/{documentId}`), ensuring simple ownership-based security rules.\n*   **Hierarchical Paths:**  The user-document relationship is maintained through a hierarchical path.\n\n**QAPs (Rules are not Filters):** The structure facilitates secure `list` operations. Listing documents under `/users/{userId}/documents` is secure because the rule can simply check `request.auth.uid == userId`.  The design does not require filtering after reading data based on user roles or permissions; instead, the data accessible is inherently determined by the user's ID and the path structure.\n\n**Invariants:**  The structure supports invariants such as ownership, timestamps, and denormalized data. The `userId` field in documents enforces ownership. Timestamps like `uploadDate` and `generatedDate` ensure data integrity. While this design doesn't explicitly denormalize roles or permissions into the documents, the structure allows for it if collaborative features are added later, by including a `members` map within the document, facilitating Authorization Independence."
  }
}