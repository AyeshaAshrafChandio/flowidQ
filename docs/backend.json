{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the SecurePass application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "profileImageUrl": {
          "type": "string",
          "description": "URL of the user's profile image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a user uploaded document in the SecurePass application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the document."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Document)"
        },
        "title": {
          "type": "string",
          "description": "Title of the document."
        },
        "description": {
          "type": "string",
          "description": "Description of the document."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date and time when the document was uploaded.",
          "format": "date-time"
        },
        "fileUrl": {
          "type": "string",
          "description": "URL where the document file is stored.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "uploadDate",
        "fileUrl"
      ]
    },
    "Queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Queue",
      "type": "object",
      "description": "Represents a queue in the smart queue system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the queue."
        },
        "locationName": {
          "type": "string",
          "description": "Name of the location where the queue is."
        },
        "description": {
          "type": "string",
          "description": "Description of the queue."
        },
        "currentNumber": {
          "type": "number",
          "description": "The current number being served in the queue."
        }
      },
      "required": [
        "id",
        "locationName",
        "currentNumber"
      ]
    },
    "QueueEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueueEntry",
      "type": "object",
      "description": "Represents an entry in a queue.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the queue entry."
        },
        "queueId": {
          "type": "string",
          "description": "Reference to Queue. (Relationship: Queue 1:N QueueEntry)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N QueueEntry)"
        },
        "entryNumber": {
          "type": "number",
          "description": "The number assigned to this entry in the queue."
        },
        "entryTime": {
          "type": "string",
          "description": "The date and time when the user joined the queue.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "queueId",
        "userId",
        "entryNumber",
        "entryTime"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Access is restricted to the user themselves.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores documents owned by a specific user. This path leverages hierarchical ownership, providing secure and efficient access control based on the user ID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "documentId",
              "description": "The unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/queues/{queueId}",
        "definition": {
          "entityName": "Queue",
          "schema": {
            "$ref": "#/backend/entities/Queue"
          },
          "description": "Stores information about each queue. Open access for reading, but restricted creation and modification.",
          "params": [
            {
              "name": "queueId",
              "description": "The unique identifier for the queue."
            }
          ]
        }
      },
      {
        "path": "/queues/{queueId}/queueEntries/{queueEntryId}",
        "definition": {
          "entityName": "QueueEntry",
          "schema": {
            "$ref": "#/backend/entities/QueueEntry"
          },
          "description": "Stores entries for each queue. Includes denormalized userId for authorization independence. Ensures only the user can manage their queue entries.",
          "params": [
            {
              "name": "queueId",
              "description": "The unique identifier for the queue."
            },
            {
              "name": "queueEntryId",
              "description": "The unique identifier for the queue entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage users, documents, queues, and queue entries for the SecurePass application, prioritizing security, scalability, and ease of rule definition. It leverages path-based ownership for user-specific data and denormalization where necessary to achieve authorization independence.\n\n*   **/users/{userId}**: Stores user profiles. Access is restricted to the user themselves.\n*   **/users/{userId}/documents/{documentId}**: Stores documents owned by a specific user. This path leverages hierarchical ownership, providing secure and efficient access control based on the user ID. \n*   **/queues/{queueId}**: Stores information about each queue. Open access for reading, but restricted creation and modification.\n*   **/queues/{queueId}/queueEntries/{queueEntryId}**: Stores entries for each queue. Includes denormalized userId for authorization independence. Ensures only the user can manage their queue entries.\n\nThis structure achieves authorization independence by avoiding the need for `get()` calls in security rules. Access control is primarily managed through path-based ownership and denormalized data (userId in queueEntries). This approach simplifies the rules and enables atomic operations.\n\nThe design also supports the required QAPs:\n\n*   Secure `list` operations are enabled by the structural segregation of data. User documents are stored under their respective user IDs, ensuring that listing documents only returns those belonging to the authenticated user.\n*   The membership model isn't used here because we have path-based ownerships. This also simplifies the structure and rules, while maintaining security."
  }
}