{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the SecurePass application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "createdAt"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a digital document stored in the user's wallet.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the document."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Document)"
        },
        "name": {
          "type": "string",
          "description": "Name of the document."
        },
        "fileUrl": {
          "type": "string",
          "description": "URL of the stored document file.",
          "format": "uri"
        },
        "uploadDate": {
          "type": "string",
          "description": "Timestamp indicating when the document was uploaded.",
          "format": "date-time"
        },
        "encryptionKey": {
          "type": "string",
          "description": "Encryption key used to secure the document."
        },
        "qrCodeId": {
          "type": "string",
          "description": "Reference to QrCode. (Relationship: QrCode 1:1 Document)"
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "fileUrl",
        "uploadDate",
        "encryptionKey"
      ]
    },
    "QrCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QrCode",
      "type": "object",
      "description": "Represents a QR code generated for sharing a document.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the QR code."
        },
        "documentId": {
          "type": "string",
          "description": "Reference to Document. (Relationship: Document 1:1 QrCode)"
        },
        "generatedDate": {
          "type": "string",
          "description": "Timestamp indicating when the QR code was generated.",
          "format": "date-time"
        },
        "expiryDate": {
          "type": "string",
          "description": "Timestamp indicating when the QR code expires.",
          "format": "date-time"
        },
        "accessPassword": {
          "type": "string",
          "description": "Password required to access the document via the QR code."
        },
        "otp": {
          "type": "string",
          "description": "One-time password required to access the document via the QR code."
        }
      },
      "required": [
        "id",
        "documentId",
        "generatedDate",
        "expiryDate"
      ]
    },
    "Queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Queue",
      "type": "object",
      "description": "Represents a queue in the smart queue system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the queue."
        },
        "locationId": {
          "type": "string",
          "description": "Reference to Location. (Relationship: Location 1:N Queue)"
        },
        "name": {
          "type": "string",
          "description": "Name of the queue (e.g., 'Registration', 'Consultation')."
        },
        "description": {
          "type": "string",
          "description": "Description of the queue."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the queue was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "locationId",
        "name",
        "createdAt"
      ]
    },
    "QueueToken": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueueToken",
      "type": "object",
      "description": "Represents a token assigned to a user in a queue.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the queue token."
        },
        "queueId": {
          "type": "string",
          "description": "Reference to Queue. (Relationship: Queue 1:N QueueToken)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N QueueToken)"
        },
        "tokenNumber": {
          "type": "number",
          "description": "The token number assigned to the user."
        },
        "assignedTime": {
          "type": "string",
          "description": "Timestamp indicating when the token was assigned.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Current status of the token (e.g., 'Waiting', 'Serving', 'Completed')."
        }
      },
      "required": [
        "id",
        "queueId",
        "userId",
        "tokenNumber",
        "assignedTime",
        "status"
      ]
    },
    "Location": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Location",
      "type": "object",
      "description": "Represents a physical location (e.g., hospital, bank, public office).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the location."
        },
        "name": {
          "type": "string",
          "description": "Name of the location."
        },
        "address": {
          "type": "string",
          "description": "Address of the location."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude coordinate of the location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude coordinate of the location."
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "latitude",
        "longitude"
      ]
    },
    "AccessHistory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccessHistory",
      "type": "object",
      "description": "Represents the access history of documents.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the access history entry."
        },
        "documentId": {
          "type": "string",
          "description": "Reference to Document. (Relationship: Document 1:N AccessHistory)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the document was accessed.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N AccessHistory)"
        },
        "ipAddress": {
          "type": "string",
          "description": "IP address from which the document was accessed."
        },
        "accessMethod": {
          "type": "string",
          "description": "Method used to access the document (e.g., 'QR Code', 'Direct Link')."
        }
      },
      "required": [
        "id",
        "documentId",
        "timestamp",
        "userId",
        "ipAddress",
        "accessMethod"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information.  Owned by the user (path-based ownership).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores documents owned by a specific user. Path based ownership secured via the /users/{userId} path. Includes 'userId' for data integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "documentId",
              "description": "The unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/qrCodes/{qrCodeId}",
        "definition": {
          "entityName": "QrCode",
          "schema": {
            "$ref": "#/backend/entities/QrCode"
          },
          "description": "Stores QR code information.  This is a top level collection due to requiring lookups of QR codes without knowing the user, and due to it storing sensitive OTP and password data. Access is controlled by complex security rules validating document ownership and OTP/Password combinations.",
          "params": [
            {
              "name": "qrCodeId",
              "description": "The unique identifier for the QR code."
            }
          ]
        }
      },
      {
        "path": "/locations/{locationId}",
        "definition": {
          "entityName": "Location",
          "schema": {
            "$ref": "#/backend/entities/Location"
          },
          "description": "Stores information about physical locations.",
          "params": [
            {
              "name": "locationId",
              "description": "The unique identifier for the location."
            }
          ]
        }
      },
      {
        "path": "/locations/{locationId}/queues/{queueId}",
        "definition": {
          "entityName": "Queue",
          "schema": {
            "$ref": "#/backend/entities/Queue"
          },
          "description": "Stores queue information for a specific location. Path-based access control, secured under the /locations/{locationId} path.",
          "params": [
            {
              "name": "locationId",
              "description": "The unique identifier for the location."
            },
            {
              "name": "queueId",
              "description": "The unique identifier for the queue."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/queueTokens/{queueTokenId}",
        "definition": {
          "entityName": "QueueToken",
          "schema": {
            "$ref": "#/backend/entities/QueueToken"
          },
          "description": "Stores queue tokens assigned to users.  Path-based access control, secured under the /users/{userId} path.  Includes 'userId' for data integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "queueTokenId",
              "description": "The unique identifier for the queue token."
            }
          ]
        }
      },
      {
        "path": "/accessHistory/{accessHistoryId}",
        "definition": {
          "entityName": "AccessHistory",
          "schema": {
            "$ref": "#/backend/entities/AccessHistory"
          },
          "description": "Stores access history entries for documents. Top level collection for querying and analysis. Contains documentId and userId, allowing aggregation of access.",
          "params": [
            {
              "name": "accessHistoryId",
              "description": "The unique identifier for the access history entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs.  \n\n**Authorization Independence:**  Authorization independence is achieved through denormalization. For instance, access to documents is governed by the user's ownership. This information is embedded within the document path (`/users/{userId}/documents/{documentId}`). This avoids the need for `get()` calls in security rules to check the user's role or permissions, allowing for atomic operations.\n\n**Structural Segregation:** Data with different security requirements is segregated into different collections. User profiles are stored separately from documents and queues. This allows us to apply specific security rules to each collection based on its data sensitivity.\n\n**Access Modeling:**  The structure follows a consistent access modeling pattern:\n\n*   **Private Data:** User-owned data (documents, queue tokens) is stored under the `/users/{userId}` path, providing path-based ownership.\n*   **Hierarchical Paths:** Nested data relationships (e.g., User -> Documents, Location -> Queues) are represented through hierarchical paths, simplifying security rules.\n*   **Collaborative Data:** While not explicitly present in the initial entity definitions, if collaborative document access were a feature, a `members` map within the Document entity would be used.\n\n**QAPs (Rules are not Filters):**\n\n*   The segregation of data into different collections based on ownership and access level ensures that `list` operations are secure. For example, listing documents under `/users/{userId}/documents` only returns documents owned by that user, preventing unauthorized access.\n\n**Invariants:**\n\n*   The structure supports the integrity of ownership by explicitly including the `userId` in the document and queue token entities. Timestamps (`createdAt`, `uploadDate`, `assignedTime`) maintain data integrity.\n\n**Specific Path Justifications:**\n\n*   `/users/{userId}/documents/{documentId}`: This path provides a clear ownership model, allowing secure access to user-owned documents.\n*   `/locations/{locationId}/queues/{queueId}`: Represents queues at specific locations. The `locationId` field in the `Queue` documents denormalizes location ownership, enabling QAPs for queue listing and management.\n*   `/users/{userId}/queueTokens/{queueTokenId}`: This path securely associates queue tokens with specific users."
  }
}